{
  parserClass="me.yiiguxing.demo.cls.htmlx.parser.SimpleHTMLParser"
  extends="me.yiiguxing.demo.cls.htmlx.psi.impl.SimpleHTMLElementBase"
  implements="me.yiiguxing.demo.cls.htmlx.psi.SimpleHTMLElement"

  psiClassPrefix="SimpleHTML"
  psiImplClassSuffix="Impl"
  psiPackage="me.yiiguxing.demo.cls.htmlx.psi"
  psiImplPackage="me.yiiguxing.demo.cls.htmlx.psi.impl"

  elementTypeHolderClass="me.yiiguxing.demo.cls.htmlx.psi.SimpleHTMLTypes"
  elementTypeClass="me.yiiguxing.demo.cls.htmlx.psi.SimpleHTMLElementType"
  tokenTypeClass="me.yiiguxing.demo.cls.htmlx.psi.SimpleHTMLTokenType"

  psiImplUtilClass="me.yiiguxing.demo.cls.htmlx.psi.impl.SimpleHTMLPsiImplUtil"

  tokens=[
    TAG_START='<'
    TAG_END='>'
    END_TAG_START='</'
    EMPTY_TAG_END='/>'
    ATTRIBUTE_ASSIGN='='
    COMMENT_START='<!--'
    COMMENT_END='-->'
    ATTRIBUTE_VALUE_DEFINER_SQ="'"
    ATTRIBUTE_VALUE_DEFINER_DQ='"'
    DOCTYPE_START='<!DOCTYPE'
    DOCTYPE_NAME='HTML'
  ]

  extends(".*Tag")=Tag
}

SimpleHTMLFile ::= Doctype? (Tag | Comment)*

Doctype ::= DOCTYPE_START DOCTYPE_NAME DOCTYPE_END { pin=1 recoverWhile="Recover" }
private Recover ::= !('<')

Tag ::= NotEmptyTag | EmptyTag {
  methods=[getTagNameElement getAttributeList]
}

NotEmptyTag ::= TagStart TagContent* TagEnd {
  pin=1
  methods=[getStartTagNameElement getEndTagNameElement]
}
private TagContent ::= Tag | Comment | Text

EmptyTag ::= TagHead '/>' { pin=1 }

private TagStart ::= TagHead '>'
private TagHead ::= '<' START_TAG_NAME Attribute* { pin=1 }
Attribute ::= ATTRIBUTE_NAME ('=' AttributeValue)? { pin(".*")=1 }
AttributeValue ::= ATTRIBUTE_VALUE_TEXT | '"' ATTRIBUTE_VALUE_TEXT? '"' | "'" ATTRIBUTE_VALUE_TEXT? "'" {
  pin(".*")=1
}
private TagEnd ::= '</' END_TAG_NAME '>' { pin=1 }

Text ::= ROW_TEXT+

Comment ::= '<!--' COMMENT_TEXT* '-->'  {
    pin=1
    implements=["me.yiiguxing.demo.cls.htmlx.psi.SimpleHTMLElement" "com.intellij.psi.PsiComment"]
    extends="me.yiiguxing.demo.cls.htmlx.psi.impl.SimpleHTMLCommentBase"
}
